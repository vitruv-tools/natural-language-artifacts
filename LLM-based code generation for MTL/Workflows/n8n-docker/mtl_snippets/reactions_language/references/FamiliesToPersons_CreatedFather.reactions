import "http://vitruv.tools/methodologisttemplate/families" as families
import "http://vitruv.tools/methodologisttemplate/persons" as persons

reactions: familiesToPersons
in reaction to changes in families
execute actions in persons

reaction CreatedFather {
	after element families::Member replaced at families::Family[father]
    with newValue !== null
	call {
		updateNameAndCorrespondencesOfCorrespondingPerson(newValue, affectedEObject)
		createMaleFromNewMember(newValue, affectedEObject)
	}
}

routine updateNameAndCorrespondencesOfCorrespondingPerson(families::Member newMember, families::Family newFamily) {
	match {
		val correspondingPerson = retrieve persons::Person corresponding to newMember
	}
	update {
		correspondingPerson.fullName = newMember.firstName + " " + newFamily.lastName
		addCorrespondenceBetween(correspondingPerson, newFamily)
	}
}

routine createMaleFromNewMember(families::Member newFather, families::Family family) {
	match {
		require absence of persons::Person corresponding to newFather
	}
	update {
		createMale(newFather, family)
	}
}

routine createMale(families::Member newMember, families::Family family) {
	match {
		val personsRegister = retrieve persons::PersonRegister corresponding to family.eContainer
	}
	create {
		val person = new persons::Male
	}
	update {
		person.fullName = newMember.firstName + " " + family.lastName
		personsRegister.persons.add(person)
		addCorrespondenceBetween(newMember, person)
		addCorrespondenceBetween(family, person)
	}
}