import "http://vitruv.tools/methodologisttemplate/amalthea" as amalthea
import "http://vitruv.tools/methodologisttemplate/ascet" as ascet

reactions: amaltheaToAscet
in reaction to changes in amalthea
execute actions in ascet

reaction TaskCreated {
	after element amalthea::Task inserted in amalthea::ComponentContainer[tasks]
	call createAscetTask(newValue)
}

routine createAscetTask(amalthea::Task amaltheaTask) {
	match {
		retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
	}
	update {
		val taskType = userInteractor.singleSelectionDialogBuilder
			.message("Select task type to create:")
			.choices(#["InterruptTask", "PeriodicTask", "SoftwareTask", "TimeTableTask"])
			.startInteraction
		switch taskType {
			case "InterruptTask": createInterruptTask(amaltheaTask)
			case "PeriodicTask": createPeriodicTask(amaltheaTask)
			case "SoftwareTask": createSoftwareTask(amaltheaTask)
			case "TimeTableTask": createTimeTableTask(amaltheaTask)
		}
	}
}

routine createInterruptTask(amalthea::Task amaltheaTask) {
	match {
		retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
		require absence of ascet::InterruptTask corresponding to amaltheaTask
	}
	create {
		val ascetTask = new ascet::InterruptTask
	}
	update {
		ascetTask.name = amaltheaTask.name
		ascetModule.tasks += ascetTask
		addCorrespondenceBetween(amaltheaTask, ascetTask)
	}
}

routine createPeriodicTask(amalthea::Task amaltheaTask) {
	match {
		retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
		require absence of ascet::PeriodicTask corresponding to amaltheaTask
	}
	create {
		val ascetTask = new ascet::PeriodicTask
	}
	update {
		ascetTask.name = amaltheaTask.name
		ascetModule.tasks += ascetTask
		addCorrespondenceBetween(amaltheaTask, ascetTask)
	}
}

routine createSoftwareTask(amalthea::Task amaltheaTask) {
	match {
		retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
		require absence of ascet::SoftwareTask corresponding to amaltheaTask
	}
	create {
		val ascetTask = new ascet::SoftwareTask
	}
	update {
		ascetTask.name = amaltheaTask.name
		ascetModule.tasks += ascetTask
		addCorrespondenceBetween(amaltheaTask, ascetTask)
	}
}

routine createTimeTableTask(amalthea::Task amaltheaTask) {
	match {
		retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
		require absence of ascet::TimeTableTask corresponding to amaltheaTask
	}
	create {
		val ascetTask = new ascet::TimeTableTask
	}
	update {
		ascetTask.name = amaltheaTask.name
		ascetModule.tasks += ascetTask
		addCorrespondenceBetween(amaltheaTask, ascetTask)
	}
}