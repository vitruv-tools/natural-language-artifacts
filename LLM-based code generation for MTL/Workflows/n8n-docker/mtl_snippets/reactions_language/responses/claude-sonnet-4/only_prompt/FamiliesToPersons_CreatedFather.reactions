import "http://vitruv.tools/methodologisttemplate/families" as families
import "http://vitruv.tools/methodologisttemplate/persons" as persons

transformation familiesToPersons for families to persons

reaction CreatedFather {
	after element families::Member inserted in families::Family[father]
	call updateNameAndCorrespondencesOfCorrespondingPerson(newValue)
	call createMaleFromNewMember(newValue)
}

routine updateNameAndCorrespondencesOfCorrespondingPerson(families::Member member) {
	match {
		val correspondingPerson = retrieve persons::Person corresponding to member
	}
	update {
		correspondingPerson.fullName = member.firstName + " " + member.familyFather.lastName
	}
}

routine createMaleFromNewMember(families::Member member) {
	match {
		require absence of persons::Person corresponding to member
	}
	call createMale(member)
}

routine createMale(families::Member member) {
	match {
		val personRegister = retrieve persons::PersonRegister corresponding to member.familyFather.eContainer
	}
	create {
		val male = new persons::Male
	}
	update {
		male.fullName = member.firstName + " " + member.familyFather.lastName
		personRegister.persons += male
		add correspondence between member and male
	}
}