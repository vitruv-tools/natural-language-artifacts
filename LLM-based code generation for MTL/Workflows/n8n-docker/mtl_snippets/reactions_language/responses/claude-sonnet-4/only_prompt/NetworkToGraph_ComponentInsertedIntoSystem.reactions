import "http://vitruv.tools/methodologisttemplate/network" as network
import "http://vitruv.tools/methodologisttemplate/graph" as graph

transformation networkToGraph for network <-> graph {
	reaction ComponentInsertedIntoSystem {
		after element network::Component inserted in network::System[components]
		call createAndInsertEntity(newValue, affectedEObject)
	}
	
	routine createAndInsertEntity(component : network::Component, system : network::System) {
		match {
			require absence of graph::Entity corresponding to component
		}
		action {
			val root = system.correspondingElements.filter(graph::Root).head
			val entity = create graph::Entity and initialize {
				entity.name = component.name
			}
			add correspondence between component and entity
			update root {
				root.entities += entity
			}
		}
	}
}