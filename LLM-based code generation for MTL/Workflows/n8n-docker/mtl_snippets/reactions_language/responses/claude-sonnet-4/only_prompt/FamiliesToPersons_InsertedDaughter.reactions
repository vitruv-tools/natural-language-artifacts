import "http://vitruv.tools/methodologisttemplate/families" as families
import "http://vitruv.tools/methodologisttemplate/persons" as persons

transformation familiesToPersons {
    reaction InsertedDaughter {
        after element families::Member inserted in families::Family[daughters]
        call createOrFindFemale(newValue, affectedEObject)
    }
    
    routine createOrFindFemale(families::Member daughter, families::Family family) {
        match {
            val personRegister = retrieve persons::PersonRegister corresponding to family.eContainer
        }
        action {
            val correspondingFemale = personRegister.persons.filter(persons::Female).findFirst[
                getCorrespondingElements(it, families::Member).contains(daughter)
            ]
            if (correspondingFemale === null) {
                call createFemale(daughter, family, personRegister)
            } else {
                call updateNameAndCorrespondencesOfCorrespondingPerson(daughter, correspondingFemale)
            }
        }
    }
    
    routine createFemale(families::Member daughter, families::Family family, persons::PersonRegister personRegister) {
        create {
            val female = new persons::Female
        }
        update {
            personRegister.persons += female
            addCorrespondenceBetween(daughter, female)
        }
        call updateNameAndCorrespondencesOfCorrespondingPerson(daughter, female)
    }
    
    routine updateNameAndCorrespondencesOfCorrespondingPerson(families::Member daughter, persons::Female female) {
        action {
            val family = daughter.familyDaughter
            if (family !== null && daughter.firstName !== null && family.lastName !== null) {
                female.fullName = daughter.firstName + " " + family.lastName
            }
        }
    }
}