import "http://vitruv.tools/methodologisttemplate/amalthea" as amalthea
import "http://vitruv.tools/methodologisttemplate/ascet" as ascet

transformation amaltheaToAscet {
    between amalthea and ascet
    
    reaction TaskCreated {
        after element amalthea::Task inserted in amalthea::ComponentContainer[tasks]
        call createAscetTask(newValue)
    }
    
    routine createAscetTask(amalthea::Task amaltheaTask) {
        action {
            val taskTypes = #["InterruptTask", "PeriodicTask", "SoftwareTask", "TimeTableTask"]
            val selectedType = userInteractor.singleSelectionDialogBuilder
                .message("Select task type to create:")
                .choices(taskTypes)
                .startInteraction()
            
            switch selectedType {
                case "InterruptTask": call createInterruptTask(amaltheaTask)
                case "PeriodicTask": call createPeriodicTask(amaltheaTask)
                case "SoftwareTask": call createSoftwareTask(amaltheaTask)
                case "TimeTableTask": call createTimeTableTask(amaltheaTask)
            }
        }
    }
    
    routine createInterruptTask(amalthea::Task amaltheaTask) {
        match {
            val ascetModule = retrieve ascet::AscetModule
        }
        action {
            val existingTask = ascetModule.tasks.findFirst[name == amaltheaTask.name]
            if (existingTask === null) {
                val interruptTask = create ascet::InterruptTask
                interruptTask.name = amaltheaTask.name
                ascetModule.tasks += interruptTask
                addCorrespondenceBetween(amaltheaTask, interruptTask)
            }
        }
    }
    
    routine createPeriodicTask(amalthea::Task amaltheaTask) {
        match {
            val ascetModule = retrieve ascet::AscetModule
        }
        action {
            val existingTask = ascetModule.tasks.findFirst[name == amaltheaTask.name]
            if (existingTask === null) {
                val periodicTask = create ascet::PeriodicTask
                periodicTask.name = amaltheaTask.name
                ascetModule.tasks += periodicTask
                addCorrespondenceBetween(amaltheaTask, periodicTask)
            }
        }
    }
    
    routine createSoftwareTask(amalthea::Task amaltheaTask) {
        match {
            val ascetModule = retrieve ascet::AscetModule
        }
        action {
            val existingTask = ascetModule.tasks.findFirst[name == amaltheaTask.name]
            if (existingTask === null) {
                val softwareTask = create ascet::SoftwareTask
                softwareTask.name = amaltheaTask.name
                ascetModule.tasks += softwareTask
                addCorrespondenceBetween(amaltheaTask, softwareTask)
            }
        }
    }
    
    routine createTimeTableTask(amalthea::Task amaltheaTask) {
        match {
            val ascetModule = retrieve ascet::AscetModule
        }
        action {
            val existingTask = ascetModule.tasks.findFirst[name == amaltheaTask.name]
            if (existingTask === null) {
                val timeTableTask = create ascet::TimeTableTask
                timeTableTask.name = amaltheaTask.name
                ascetModule.tasks += timeTableTask
                addCorrespondenceBetween(amaltheaTask, timeTableTask)
            }
        }
    }
}