import "http://vitruv.tools/methodologisttemplate/amalthea" as amalthea
import "http://vitruv.tools/methodologisttemplate/ascet" as ascet

reactions: amaltheaToAscet
in reaction to changes in amalthea
execute actions in ascet

reaction TaskCreated {
	after element amalthea::Task inserted in amalthea::ComponentContainer[tasks]
	call createAscetTask(newValue)
}

routine createAscetTask(amalthea::Task amaltheaTask) {
	match {
		val ascetModule = retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
	}
	update {
		val taskTypes = #["InterruptTask", "PeriodicTask", "SoftwareTask", "TimeTableTask"]
		val selectedType = userInteractor.selectFromMessage(UserInteractionType.MODAL, "Select task type", "Choose the type of ASCET task to create:", taskTypes)
		switch selectedType {
			case "InterruptTask": createInterruptTask(amaltheaTask, ascetModule)
			case "PeriodicTask": createPeriodicTask(amaltheaTask, ascetModule)
			case "SoftwareTask": createSoftwareTask(amaltheaTask, ascetModule)
			case "TimeTableTask": createTimeTableTask(amaltheaTask, ascetModule)
		}
	}
}

routine createInterruptTask(amalthea::Task amaltheaTask, ascet::AscetModule ascetModule) {
	match {
		require absence of ascet::InterruptTask corresponding to amaltheaTask
	}
	create {
		val interruptTask = new ascet::InterruptTask
	}
	update {
		interruptTask.name = amaltheaTask.name
		ascetModule.tasks += interruptTask
		addCorrespondenceBetween(interruptTask, amaltheaTask)
	}
}

routine createPeriodicTask(amalthea::Task amaltheaTask, ascet::AscetModule ascetModule) {
	match {
		require absence of ascet::PeriodicTask corresponding to amaltheaTask
	}
	create {
		val periodicTask = new ascet::PeriodicTask
	}
	update {
		periodicTask.name = amaltheaTask.name
		ascetModule.tasks += periodicTask
		addCorrespondenceBetween(periodicTask, amaltheaTask)
	}
}

routine createSoftwareTask(amalthea::Task amaltheaTask, ascet::AscetModule ascetModule) {
	match {
		require absence of ascet::SoftwareTask corresponding to amaltheaTask
	}
	create {
		val softwareTask = new ascet::SoftwareTask
	}
	update {
		softwareTask.name = amaltheaTask.name
		ascetModule.tasks += softwareTask
		addCorrespondenceBetween(softwareTask, amaltheaTask)
	}
}

routine createTimeTableTask(amalthea::Task amaltheaTask, ascet::AscetModule ascetModule) {
	match {
		require absence of ascet::TimeTableTask corresponding to amaltheaTask
	}
	create {
		val timeTableTask = new ascet::TimeTableTask
	}
	update {
		timeTableTask.name = amaltheaTask.name
		ascetModule.tasks += timeTableTask
		addCorrespondenceBetween(timeTableTask, amaltheaTask)
	}
}