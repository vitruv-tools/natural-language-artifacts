import "http://vitruv.tools/methodologisttemplate/amalthea" as amalthea
import "http://vitruv.tools/methodologisttemplate/ascet" as ascet

reactions: amaltheaToAscet
in reaction to changes in amalthea
execute actions in ascet

reaction TaskCreated {
	after element amalthea::Task inserted in amalthea::ComponentContainer[tasks]
	call createAscetTask(newValue)
}

routine createAscetTask(amalthea::Task task) {
	match {
		val container = retrieve amalthea::ComponentContainer containing task
		val ascetModule = retrieve ascet::AscetModule corresponding to container
	}
	update {
		val taskType = userInteractor.singleSelectionDialogBuilder
			.message("Select task type to create:")
			.choices("InterruptTask", "PeriodicTask", "SoftwareTask", "TimeTableTask")
			.startInteraction()
		switch taskType {
			case "InterruptTask": createInterruptTask(task, ascetModule)
			case "PeriodicTask": createPeriodicTask(task, ascetModule)
			case "SoftwareTask": createSoftwareTask(task, ascetModule)
			case "TimeTableTask": createTimeTableTask(task, ascetModule)
		}
	}
}

routine createInterruptTask(amalthea::Task task, ascet::AscetModule ascetModule) {
	match {
		require absence of ascet::InterruptTask corresponding to task
	}
	create {
		val interruptTask = new ascet::InterruptTask
	}
	update {
		interruptTask.name = task.name
		ascetModule.tasks += interruptTask
		addCorrespondenceBetween(task, interruptTask)
	}
}

routine createPeriodicTask(amalthea::Task task, ascet::AscetModule ascetModule) {
	match {
		require absence of ascet::PeriodicTask corresponding to task
	}
	create {
		val periodicTask = new ascet::PeriodicTask
	}
	update {
		periodicTask.name = task.name
		ascetModule.tasks += periodicTask
		addCorrespondenceBetween(task, periodicTask)
	}
}

routine createSoftwareTask(amalthea::Task task, ascet::AscetModule ascetModule) {
	match {
		require absence of ascet::SoftwareTask corresponding to task
	}
	create {
		val softwareTask = new ascet::SoftwareTask
	}
	update {
		softwareTask.name = task.name
		ascetModule.tasks += softwareTask
		addCorrespondenceBetween(task, softwareTask)
	}
}

routine createTimeTableTask(amalthea::Task task, ascet::AscetModule ascetModule) {
	match {
		require absence of ascet::TimeTableTask corresponding to task
	}
	create {
		val timeTableTask = new ascet::TimeTableTask
	}
	update {
		timeTableTask.name = task.name
		ascetModule.tasks += timeTableTask
		addCorrespondenceBetween(task, timeTableTask)
	}
}