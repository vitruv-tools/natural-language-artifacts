import "http://vitruv.tools/methodologisttemplate/amalthea" as amalthea
import "http://vitruv.tools/methodologisttemplate/ascet" as ascet

reactions: amaltheaToAscet
in reaction to changes in amalthea
execute actions in ascet

reaction TaskCreated {
	after element amalthea::Task inserted in amalthea::ComponentContainer[tasks]
	call createAscetTask(newValue)
}

routine createAscetTask(amalthea::Task amaltheaTask) {
	update {
		val taskTypeChoice = userInteractor.singleSelectionDialogBuilder.message("Select task type to create:").choices(#["InterruptTask", "PeriodicTask", "SoftwareTask", "TimeTableTask"]).startInteraction()
		switch (taskTypeChoice) {
			case 0: createInterruptTask(amaltheaTask)
			case 1: createPeriodicTask(amaltheaTask)
			case 2: createSoftwareTask(amaltheaTask)
			case 3: createTimeTableTask(amaltheaTask)
			default: return
		}
	}
}

routine createInterruptTask(amalthea::Task amaltheaTask) {
	match {
		val ascetModule = retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
		require absence of ascet::InterruptTask corresponding to amaltheaTask
	}
	create {
		val newInterruptTask = new ascet::InterruptTask
	}
	update {
		newInterruptTask.name = amaltheaTask.name
		ascetModule.tasks += newInterruptTask
		addCorrespondenceBetween(newInterruptTask, amaltheaTask)
	}
}

routine createPeriodicTask(amalthea::Task amaltheaTask) {
	match {
		val ascetModule = retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
		require absence of ascet::PeriodicTask corresponding to amaltheaTask
	}
	create {
		val newPeriodicTask = new ascet::PeriodicTask
	}
	update {
		newPeriodicTask.name = amaltheaTask.name
		ascetModule.tasks += newPeriodicTask
		addCorrespondenceBetween(newPeriodicTask, amaltheaTask)
	}
}

routine createSoftwareTask(amalthea::Task amaltheaTask) {
	match {
		val ascetModule = retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
		require absence of ascet::SoftwareTask corresponding to amaltheaTask
	}
	create {
		val newSoftwareTask = new ascet::SoftwareTask
	}
	update {
		newSoftwareTask.name = amaltheaTask.name
		ascetModule.tasks += newSoftwareTask
		addCorrespondenceBetween(newSoftwareTask, amaltheaTask)
	}
}

routine createTimeTableTask(amalthea::Task amaltheaTask) {
	match {
		val ascetModule = retrieve ascet::AscetModule corresponding to amaltheaTask.eContainer
		require absence of ascet::TimeTableTask corresponding to amaltheaTask
	}
	create {
		val newTimeTableTask = new ascet::TimeTableTask
	}
	update {
		newTimeTableTask.name = amaltheaTask.name
		ascetModule.tasks += newTimeTableTask
		addCorrespondenceBetween(newTimeTableTask, amaltheaTask)
	}
}