import "http://vitruv.tools/methodologisttemplate/families" as families
import "http://vitruv.tools/methodologisttemplate/persons" as persons

reactions: familiesToPersons
in reaction to changes in families
execute actions in persons

reaction CreatedFather {
	after element families::Member replaced at families::Family[father]
	call updateNameAndCorrespondencesOfCorrespondingPerson(newValue, affectedEObject)
	call createMaleFromNewMember(newValue, affectedEObject)
}

routine updateNameAndCorrespondencesOfCorrespondingPerson(families::Member father, families::Family family) {
	match {
		val person = retrieve persons::Person corresponding to father
	}
	update {
		person.fullName = father.firstName + " " + family.lastName
		addCorrespondenceBetween(person, family)
	}
}

routine createMaleFromNewMember(families::Member father, families::Family family) {
	match {
		require absence of persons::Person corresponding to father
	}
	update {
		createMale(father, family)
	}
}

routine createMale(families::Member father, families::Family family) {
	match {
		val familyRegister = family.eContainer as families::FamilyRegister
		val personRegister = retrieve persons::PersonRegister corresponding to familyRegister
	}
	create {
		val newMale = new persons::Male
	}
	update {
		newMale.fullName = father.firstName + " " + family.lastName
		personRegister.persons.add(newMale)
		addCorrespondenceBetween(newMale, father)
		addCorrespondenceBetween(newMale, family)
	}
}