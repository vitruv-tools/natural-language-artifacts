import "http://vitruv.tools/methodologisttemplate/amalthea" as amalthea
import "http://vitruv.tools/methodologisttemplate/ascet" as ascet

reactions: amaltheaToAscet
in reaction to changes in amalthea
execute actions in ascet

reaction TaskCreated {
	after element amalthea::Task inserted in amalthea::ComponentContainer[tasks]
	call createAscetTask(newValue)
}

routine createAscetTask(amalthea::Task amaltheaTask) {
	update {
		val String[] choices = #["InterruptTask", "PeriodicTask", "SoftwareTask", "TimeTableTask"]
		val String selection = userInteractor.singleSelectionDialogBuilder.message("Select the type of ASCET task to create:").choices(choices).startInteraction()
		switch (selection) {
			case "InterruptTask": createInterruptTask(amaltheaTask)
			case "PeriodicTask": createPeriodicTask(amaltheaTask)
			case "SoftwareTask": createSoftwareTask(amaltheaTask)
			case "TimeTableTask": createTimeTableTask(amaltheaTask)
			default: {
				return
			}
		}
	}
}

routine createInterruptTask(amalthea::Task amaltheaTask) {
	match {
		val container = amaltheaTask.eContainer as amalthea::ComponentContainer
		val ascetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::InterruptTask corresponding to amaltheaTask
	}
	create {
		val newAscetTask = new ascet::InterruptTask
	}
	update {
		newAscetTask.name = amaltheaTask.name
		ascetModule.tasks.add(newAscetTask)
		addCorrespondenceBetween(newAscetTask, amaltheaTask)
	}
}

routine createPeriodicTask(amalthea::Task amaltheaTask) {
	match {
		val container = amaltheaTask.eContainer as amalthea::ComponentContainer
		val ascetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::PeriodicTask corresponding to amaltheaTask
	}
	create {
		val newAscetTask = new ascet::PeriodicTask
	}
	update {
		newAscetTask.name = amaltheaTask.name
		ascetModule.tasks.add(newAscetTask)
		addCorrespondenceBetween(newAscetTask, amaltheaTask)
	}
}

routine createSoftwareTask(amalthea::Task amaltheaTask) {
	match {
		val container = amaltheaTask.eContainer as amalthea::ComponentContainer
		val ascetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::SoftwareTask corresponding to amaltheaTask
	}
	create {
		val newAscetTask = new ascet::SoftwareTask
	}
	update {
		newAscetTask.name = amaltheaTask.name
		ascetModule.tasks.add(newAscetTask)
		addCorrespondenceBetween(newAscetTask, amaltheaTask)
	}
}

routine createTimeTableTask(amalthea::Task amaltheaTask) {
	match {
		val container = amaltheaTask.eContainer as amalthea::ComponentContainer
		val ascetModule = retrieve ascet::AscetModule corresponding to container
		require absence of ascet::TimeTableTask corresponding to amaltheaTask
	}
	create {
		val newAscetTask = new ascet::TimeTableTask
	}
	update {
		newAscetTask.name = amaltheaTask.name
		ascetModule.tasks.add(newAscetTask)
		addCorrespondenceBetween(newAscetTask, amaltheaTask)
	}
}