import "http://vitruv.tools/methodologisttemplate/families" as families
import "http://vitruv.tools/methodologisttemplate/persons" as persons
reactions: familiesToPersons 
in reaction to changes in families 
execute actions in persons {
	reaction DeletedFamily {
		after element families::Family deleted
		call xtend {
			if (oldElement.father !== null) {
				deletePerson(oldElement.father)
			}
			if (oldElement.mother !== null) {
				deletePerson(oldElement.mother)
			}
			oldElement.sons.forEach[s | deletePerson(s)]
			oldElement.daughters.forEach[d | deletePerson(d)]
		}
	}
	routine deletePerson(families::Member member) {
		match {
			val person = retrieve persons::Person corresponding to member
		}
		update xtend {
			val family = member.eContainer as families.Family
			val register = person.eContainer as persons.PersonRegister
			register.persons.remove(person)
			removeCorrespondence([person, member, family])
		}
	}
}