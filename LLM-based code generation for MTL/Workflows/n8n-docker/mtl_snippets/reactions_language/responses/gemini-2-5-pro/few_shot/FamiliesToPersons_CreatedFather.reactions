import "http://vitruv.tools/methodologisttemplate/families" as families
import "http://vitruv.tools/methodologisttemplate/persons" as persons

transformation familiesToPersons
	reacts to changes in families
	updates persons

reaction CreatedFather {
	after element families::Member inserted into families::Family.father
	call updateNameAndCorrespondencesOfCorrespondingPerson(newValue, affectedEObject)
	call createMaleFromNewMember(newValue, affectedEObject)
}

routine updateNameAndCorrespondencesOfCorrespondingPerson(families::Member newFather, families::Family family) {
	match {
		val person = retrieve persons::Person corresponding to newFather
	}
	update {
		person.fullName = newFather.firstName + " " + family.lastName
		addCorrespondenceBetween(person, family)
	}
}

routine createMaleFromNewMember(families::Member newFather, families::Family family) {
	match {
		require absence of persons::Person corresponding to newFather
	}
	call createMale(newFather, family)
}

routine createMale(families::Member newFather, families::Family family) {
	create {
		val newMale = new persons::Male
	}
	update {
		newMale.fullName = newFather.firstName + " " + family.lastName
		val familyRegister = family.eContainer as families::FamilyRegister
		val personRegister = retrieve persons::PersonRegister corresponding to familyRegister
		personRegister.persons.add(newMale)
		addCorrespondenceBetween(newMale, newFather)
		addCorrespondenceBetween(newMale, family)
	}
}