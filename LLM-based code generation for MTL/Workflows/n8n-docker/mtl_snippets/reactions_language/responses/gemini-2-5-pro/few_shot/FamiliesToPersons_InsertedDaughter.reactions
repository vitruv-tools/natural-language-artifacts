import "http://vitruv.tools/methodologisttemplate/families" as families
import "http://vitruv.tools/methodologisttemplate/persons" as persons

transformation familiesToPersons
    reacts to families
    enforces persons

reaction InsertedDaughter {
    after element families::Member inserted into families::Family.daughters as daughter
    call createOrFindFemale(daughter) returns person
    call updateNameAndCorrespondencesOfCorrespondingPerson(daughter, person)
}

routine createOrFindFemale(families::Member daughter) returns persons::Female {
    match {
        optional val existingPerson = retrieve persons::Female corresponding to daughter
    }
    update {
        if (existingPerson !== null) {
            return existingPerson
        } else {
            return call createFemale()
        }
    }
}

routine createFemale() returns persons::Female {
    match {
        val personRegister = retrieve persons::PersonRegister
    }
    create {
        val newFemale = new persons::Female
    }
    update {
        personRegister.persons.add(newFemale)
        return newFemale
    }
}

routine updateNameAndCorrespondencesOfCorrespondingPerson(families::Member daughter, persons::Female person) {
    match {
        val family = daughter.familyDaughter
    }
    update {
        person.fullName = daughter.firstName + " " + family.lastName
        addCorrespondenceBetween(person, daughter)
    }
}