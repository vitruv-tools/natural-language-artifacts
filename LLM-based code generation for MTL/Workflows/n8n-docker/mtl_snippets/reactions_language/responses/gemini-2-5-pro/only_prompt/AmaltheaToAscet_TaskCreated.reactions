import "http://vitruv.tools/methodologisttemplate/amalthea"
import "http://vitruv.tools/methodologisttemplate/ascet"
import org.eclipse.jface.dialogs.MessageDialog
import org.eclipse.swt.widgets.Display
import org.eclipse.swt.widgets.Shell

transformation amaltheaToAscet {
    source amalthea : "http://vitruv.tools/methodologisttemplate/amalthea"
    target ascet : "http://vitruv.tools/methodologisttemplate/ascet"

    reaction TaskCreated on insert amalthea.Task {
        precondition:
            change.isTypeOf(Insert<amalthea.ComponentContainer, amalthea.Task>)
        effect:
            createAscetTask(change.affectedEObject)
    }

    routine createAscetTask(createdTask : amalthea.Task) {
        call xtend {
            val shell = Display.getCurrent().getActiveShell()
            val dialog = new MessageDialog(
                shell,
                "Task Type Selection",
                null,
                "Which type of ASCET task do you want to create for '" + createdTask.name + "'?",
                MessageDialog.QUESTION,
                #["InterruptTask", "PeriodicTask", "SoftwareTask", "TimeTableTask"],
                0
            )
            val result = dialog.open()
            
            switch (result) {
                case 0: call createInterruptTask(createdTask)
                case 1: call createPeriodicTask(createdTask)
                case 2: call createSoftwareTask(createdTask)
                case 3: call createTimeTableTask(createdTask)
            }
        }
    }

    routine createInterruptTask(sourceTask : amalthea.Task) {
        precondition:
            find unique ascet.AscetModule ascetModule
            !ascetModule.tasks.exists[t | t.name == sourceTask.name]
        create:
            target ascet.InterruptTask newAscetTask
        update:
            newAscetTask.name = sourceTask.name
            ascetModule.tasks += newAscetTask
        correspondence:
            link sourceTask with newAscetTask
    }

    routine createPeriodicTask(sourceTask : amalthea.Task) {
        precondition:
            find unique ascet.AscetModule ascetModule
            !ascetModule.tasks.exists[t | t.name == sourceTask.name]
        create:
            target ascet.PeriodicTask newAscetTask
        update:
            newAscetTask.name = sourceTask.name
            ascetModule.tasks += newAscetTask
        correspondence:
            link sourceTask with newAscetTask
    }

    routine createSoftwareTask(sourceTask : amalthea.Task) {
        precondition:
            find unique ascet.AscetModule ascetModule
            !ascetModule.tasks.exists[t | t.name == sourceTask.name]
        create:
            target ascet.SoftwareTask newAscetTask
        update:
            newAscetTask.name = sourceTask.name
            ascetModule.tasks += newAscetTask
        correspondence:
            link sourceTask with newAscetTask
    }

    routine createTimeTableTask(sourceTask : amalthea.Task) {
        precondition:
            find unique ascet.AscetModule ascetModule
            !ascetModule.tasks.exists[t | t.name == sourceTask.name]
        create:
            target ascet.TimeTableTask newAscetTask
        update:
            newAscetTask.name = sourceTask.name
            ascetModule.tasks += newAscetTask
        correspondence:
            link sourceTask with newAscetTask
    }
}