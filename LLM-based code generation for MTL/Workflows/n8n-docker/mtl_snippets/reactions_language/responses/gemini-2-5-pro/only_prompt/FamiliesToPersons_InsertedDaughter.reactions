import families from "http://vitruv.tools/methodologisttemplate/families"
import persons from "http://vitruv.tools/methodologisttemplate/persons"

transformation familiesToPersons

persist persons.PersonRegister using persons.id in "persons.xmi"
persist families.FamilyRegister using families.id in "families.xmi"

reaction InsertedDaughter on after creation of families.Member {
	guard:
		change.affectedEObject.eContainingFeature == families.Family.daughters

	body:
		val daughter = change.affectedEObject
		val correspondingFemale = createOrFindFemale(daughter)
		updateNameAndCorrespondencesOfCorrespondingPerson(daughter, correspondingFemale)
}

routine createOrFindFemale(families.Member daughter) : persons.Female {
	return getCorrespondence(daughter, persons.Female) ?: createFemale(daughter)
}

routine createFemale(families.Member daughter) : persons.Female {
	create persons.Female in persons.PersonRegister.persons
}

routine updateNameAndCorrespondencesOfCorrespondingPerson(families.Member daughter, persons.Female correspondingFemale) {
	update correspondingFemale {
		fullName = daughter.firstName + " " + daughter.familyDaughter.lastName
	}
	createCorrespondence(daughter, correspondingFemale)
}