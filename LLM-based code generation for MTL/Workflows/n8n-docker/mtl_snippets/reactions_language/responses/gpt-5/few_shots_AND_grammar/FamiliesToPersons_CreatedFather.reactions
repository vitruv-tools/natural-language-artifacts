import "http://vitruv.tools/methodologisttemplate/persons" as persons
import "http://vitruv.tools/methodologisttemplate/families" as families
reactions: familiesToPersons 
in reaction to changes in families 
execute actions in persons
reaction CreatedFather {
	after element replaced at families::Family[father]
	call handleCreatedFather(newValue)
}
routine handleCreatedFather(families::Member newMember) {
	update {
		updateNameAndCorrespondencesOfCorrespondingPerson(newMember)
		createMaleFromNewMember(newMember)
	}
}
routine updateNameAndCorrespondencesOfCorrespondingPerson(families::Member member) {
	match {
		val existingPerson = retrieve persons::Person corresponding to member
	}
	update {
		val fam = if(member.familyFather !== null) member.familyFather else if(member.familyMother !== null) member.familyMother else if(member.familySon !== null) member.familySon else member.familyDaughter
		val first = if(member.firstName !== null) member.firstName else ""
		val last = if(fam !== null && fam.lastName !== null) fam.lastName else ""
		val full = (first + " " + last).trim
		if(existingPerson !== null) {
			existingPerson.fullName = full
			addCorrespondenceBetween(existingPerson, member)
			if(fam !== null) {
				addCorrespondenceBetween(existingPerson, fam)
			}
		}
	}
}
routine createMaleFromNewMember(families::Member newMember) {
	match {
		require absence of persons::Male corresponding to newMember
	}
	update {
		createMale(newMember)
	}
}
routine createMale(families::Member member) {
	match {
		val personRegister = retrieve  persons::PersonRegister corresponding to (if(member.familyFather !== null) member.familyFather.eContainer else if(member.familyMother !== null) member.familyMother.eContainer else if(member.familySon !== null) member.familySon.eContainer else member.familyDaughter.eContainer)
	}
	create {
		val newMale = new persons::Male
	}
	update {
		val fam = if(member.familyFather !== null) member.familyFather else if(member.familyMother !== null) member.familyMother else if(member.familySon !== null) member.familySon else member.familyDaughter
		val first = if(member.firstName !== null) member.firstName else ""
		val last = if(fam !== null && fam.lastName !== null) fam.lastName else ""
		newMale.fullName = (first + " " + last).trim
		personRegister.persons += newMale
		addCorrespondenceBetween(newMale, member)
		if(fam !== null) {
			addCorrespondenceBetween(newMale, fam)
		}
	}
}