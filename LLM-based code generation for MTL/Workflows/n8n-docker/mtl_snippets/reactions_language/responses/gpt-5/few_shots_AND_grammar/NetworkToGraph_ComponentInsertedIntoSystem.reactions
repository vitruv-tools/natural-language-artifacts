import "http://vitruv.tools/methodologisttemplate/network" as network
import "http://vitruv.tools/methodologisttemplate/graph" as graph
reactions: networkToGraph in reaction to changes in network execute actions in graph
reaction ComponentInsertedIntoSystem {
	after element network::Component inserted in network::System[components]
	call createAndInsertEntity(newValue, newValue.eContainer as network::System)
}
routine createAndInsertEntity(network::Component component, network::System system) {
	match {
		require absence of graph::Entity corresponding to component
		val root = retrieve graph::Root corresponding to system
	}
	create {
		val newEntity = new graph::Entity
	}
	update {
		newEntity.name = component.name
		root.entities += newEntity
		addCorrespondenceBetween(newEntity, component)
	}
}