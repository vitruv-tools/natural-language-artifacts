import "http://vitruv.tools/methodologisttemplate/persons" as persons
import "http://vitruv.tools/methodologisttemplate/families" as families
reactions: familiesToPersons in reaction to changes in families execute actions in persons
reaction InsertedDaughter {
	after element families::Member inserted in families::Family[daughters]
	call createOrFindFemale(newValue)
}
reaction UpdateInsertedDaughterName {
	after element families::Member inserted in families::Family[daughters]
	call updateNameAndCorrespondencesOfCorrespondingPerson(newValue)
}
routine createOrFindFemale(families::Member daughter) {
	match {
		val personsRegister = retrieve persons::PersonRegister corresponding to daughter.familyDaughter.eContainer
		val existingFemale = retrieve persons::Female corresponding to daughter
		check daughter.familyDaughter !== null
		check existingFemale === null
	}
	create {
		val newFemale = new persons::Female
	}
	update {
		personsRegister.persons.add(newFemale)
		newFemale.fullName = daughter.firstName + " " + daughter.familyDaughter.lastName
		newFemale.birthday = new java.util.Date
		addCorrespondenceBetween(daughter, newFemale)
	}
}
routine createFemale(families::Member daughter) {
	match {
		val personsRegister = retrieve persons::PersonRegister corresponding to daughter.familyDaughter.eContainer
		require absence of persons::Person corresponding to daughter
		check daughter.familyDaughter !== null
	}
	create {
		val newFemale = new persons::Female
	}
	update {
		personsRegister.persons.add(newFemale)
		newFemale.fullName = daughter.firstName + " " + daughter.familyDaughter.lastName
		newFemale.birthday = new java.util.Date
		addCorrespondenceBetween(daughter, newFemale)
	}
}
routine updateNameAndCorrespondencesOfCorrespondingPerson(families::Member daughter) {
	match {
		val person = retrieve persons::Person corresponding to daughter
		check person !== null
		check daughter.familyDaughter !== null
	}
	update {
		person.fullName = daughter.firstName + " " + daughter.familyDaughter.lastName
		addCorrespondenceBetween(daughter, person)
	}
}