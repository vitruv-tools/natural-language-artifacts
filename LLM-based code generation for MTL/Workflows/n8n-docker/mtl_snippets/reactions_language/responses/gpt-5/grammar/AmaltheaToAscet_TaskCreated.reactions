import "http://vitruv.tools/methodologisttemplate/amalthea" as amalthea
import "http://vitruv.tools/methodologisttemplate/ascet" as ascet
reactions: amaltheaToAscet
in reaction to changes in amalthea
execute actions in ascet
reaction TaskCreated {
 after element amalthea::Task inserted in amalthea::ComponentContainer[tasks]
 call createAscetTask(newValue as amalthea::Task)
}
routine createAscetTask(amalthea::Task aTask) {
 update {
  val options = newArrayList("InterruptTask","PeriodicTask","SoftwareTask","TimeTableTask","Do nothing")
  val choice = this.userInteractor?.select("Create ASCET Task","Choose the ASCET task type to create", options)
  switch choice {
   case "InterruptTask": createInterruptTask(aTask)
   case "PeriodicTask": createPeriodicTask(aTask)
   case "SoftwareTask": createSoftwareTask(aTask)
   case "TimeTableTask": createTimeTableTask(aTask)
   default: null
  }
 }
}
routine createInterruptTask(amalthea::Task aTask) {
 match {
  val module = retrieve asserted ascet::AscetModule corresponding to aTask.eContainer
  require absence of ascet::Task corresponding to aTask
  check asserted !module.tasks.exists[t | t.name == aTask.name]
 }
 create {
  val newTask = new ascet::InterruptTask
 }
 update {
  newTask.name = aTask.name
  module.tasks += newTask
  createCorrespondence(newTask, aTask)
 }
}
routine createPeriodicTask(amalthea::Task aTask) {
 match {
  val module = retrieve asserted ascet::AscetModule corresponding to aTask.eContainer
  require absence of ascet::Task corresponding to aTask
  check asserted !module.tasks.exists[t | t.name == aTask.name]
 }
 create {
  val newTask = new ascet::PeriodicTask
 }
 update {
  newTask.name = aTask.name
  module.tasks += newTask
  createCorrespondence(newTask, aTask)
 }
}
routine createSoftwareTask(amalthea::Task aTask) {
 match {
  val module = retrieve asserted ascet::AscetModule corresponding to aTask.eContainer
  require absence of ascet::Task corresponding to aTask
  check asserted !module.tasks.exists[t | t.name == aTask.name]
 }
 create {
  val newTask = new ascet::SoftwareTask
 }
 update {
  newTask.name = aTask.name
  module.tasks += newTask
  createCorrespondence(newTask, aTask)
 }
}
routine createTimeTableTask(amalthea::Task aTask) {
 match {
  val module = retrieve asserted ascet::AscetModule corresponding to aTask.eContainer
  require absence of ascet::Task corresponding to aTask
  check asserted !module.tasks.exists[t | t.name == aTask.name]
 }
 create {
  val newTask = new ascet::TimeTableTask
 }
 update {
  newTask.name = aTask.name
  module.tasks += newTask
  createCorrespondence(newTask, aTask)
 }
}