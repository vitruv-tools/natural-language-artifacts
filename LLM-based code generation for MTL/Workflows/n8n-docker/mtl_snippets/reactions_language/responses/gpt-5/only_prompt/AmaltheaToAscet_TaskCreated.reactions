import metamodel "http://vitruv.tools/methodologisttemplate/amalthea" as amalthea
import metamodel "http://vitruv.tools/methodologisttemplate/ascet" as ascet
transformation amaltheaToAscet {
reaction TaskCreated {
after amalthea.Task inserted in amalthea.ComponentContainer.tasks {
call createAscetTask(newElement, container)
}
}
routine createAscetTask(newTask: amalthea.Task, parent: amalthea.ComponentContainer) {
xtend:
'''
val options = #["InterruptTask","PeriodicTask","SoftwareTask","TimeTableTask","Do Nothing"]
val choice = userInteractor.selectSingle("Create corresponding ASCET task", "Select the ASCET task type to create for '" + newTask.name + "'", options, "Do Nothing")
switch choice {
	case "InterruptTask": {
		this.createInterruptTask(newTask, parent)
	}
	case "PeriodicTask": {
		this.createPeriodicTask(newTask, parent)
	}
	case "SoftwareTask": {
		this.createSoftwareTask(newTask, parent)
	}
	case "TimeTableTask": {
		this.createTimeTableTask(newTask, parent)
	}
	default: {
		// do nothing
	}
}
'''
}
routine createInterruptTask(srcTask: amalthea.Task, parent: amalthea.ComponentContainer) {
xtend:
'''
val ascModule = correspondenceModel.getOneCorrespondingObject(parent, typeof(ascet.AscetModule))
if (ascModule === null) return
if (ascModule.tasks.exists[t | t.name == srcTask.name]) return
val newTask = ascet.AscetFactory.eINSTANCE.createInterruptTask
newTask.name = srcTask.name
ascModule.tasks += newTask
correspondenceModel.createCorrespondence(srcTask, newTask)
'''
}
routine createPeriodicTask(srcTask: amalthea.Task, parent: amalthea.ComponentContainer) {
xtend:
'''
val ascModule = correspondenceModel.getOneCorrespondingObject(parent, typeof(ascet.AscetModule))
if (ascModule === null) return
if (ascModule.tasks.exists[t | t.name == srcTask.name]) return
val newTask = ascet.AscetFactory.eINSTANCE.createPeriodicTask
newTask.name = srcTask.name
ascModule.tasks += newTask
correspondenceModel.createCorrespondence(srcTask, newTask)
'''
}
routine createSoftwareTask(srcTask: amalthea.Task, parent: amalthea.ComponentContainer) {
xtend:
'''
val ascModule = correspondenceModel.getOneCorrespondingObject(parent, typeof(ascet.AscetModule))
if (ascModule === null) return
if (ascModule.tasks.exists[t | t.name == srcTask.name]) return
val newTask = ascet.AscetFactory.eINSTANCE.createSoftwareTask
newTask.name = srcTask.name
ascModule.tasks += newTask
correspondenceModel.createCorrespondence(srcTask, newTask)
'''
}
routine createTimeTableTask(srcTask: amalthea.Task, parent: amalthea.ComponentContainer) {
xtend:
'''
val ascModule = correspondenceModel.getOneCorrespondingObject(parent, typeof(ascet.AscetModule))
if (ascModule === null) return
if (ascModule.tasks.exists[t | t.name == srcTask.name]) return
val newTask = ascet.AscetFactory.eINSTANCE.createTimeTableTask
newTask.name = srcTask.name
ascModule.tasks += newTask
correspondenceModel.createCorrespondence(srcTask, newTask)
'''
}
}