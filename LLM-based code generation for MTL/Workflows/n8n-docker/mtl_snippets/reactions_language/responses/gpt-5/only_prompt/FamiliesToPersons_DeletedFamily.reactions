import metamodel families from "http://vitruv.tools/reactionsparser/families"
import metamodel persons from "http://vitruv.tools/reactionsparser/persons"

transformation familiesToPersons {
  persistence families "http://vitruv.tools/methodologisttemplate/families"
  persistence persons "http://vitruv.tools/methodologisttemplate/persons"

  reaction DeletedFamily {
    before delete families::Family family {
      xtend {
        if (family.father !== null) {
          deletePerson(family.father)
        }
        if (family.mother !== null) {
          deletePerson(family.mother)
        }
        family.sons.forEach[ s | deletePerson(s) ]
        family.daughters.forEach[ d | deletePerson(d) ]
      }
    }
  }

  routine deletePerson(member : families::Member) {
    xtend {
      val person = getCorrespondingElement(member, typeof(persons.Person))
      if (person !== null) {
        val fam =
          if (member.familyFather !== null) member.familyFather
          else if (member.familyMother !== null) member.familyMother
          else if (member.familySon !== null) member.familySon
          else member.familyDaughter

        delete(person)
        removeCorrespondence(person, member)
        if (fam !== null) {
          removeCorrespondence(person, fam)
        }
      }
    }
  }
}