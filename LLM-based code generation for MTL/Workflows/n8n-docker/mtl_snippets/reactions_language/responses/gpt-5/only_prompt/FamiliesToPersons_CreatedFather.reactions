import metamodel families "http://vitruv.tools/reactionsparser/families"
import metamodel persons "http://vitruv.tools/reactionsparser/persons"

transformation familiesToPersons {
  reactsTo families
  updates persons

  persistence {
    families at "http://vitruv.tools/methodologisttemplate/families" root families::FamilyRegister
    persons at "http://vitruv.tools/methodologisttemplate/persons" root persons::PersonRegister
  }

  reaction CreatedFather {
    after set reference families::Family.father {
      val newFather = newValue as families::Member
      call updateNameAndCorrespondencesOfCorrespondingPerson(newFather)
      call createMaleFromNewMember(newFather)
    }
  }

  routine updateNameAndCorrespondencesOfCorrespondingPerson(member: families::Member) {
    val fam = member.familyFather
    guard { fam != null }
    val full = member.firstName + " " + fam.lastName
    val p = corresponding persons::Person for member
    guard { p != null }
    update p {
      fullName = full
    }
    correspondence {
      link member with p
    }
  }

  routine createMaleFromNewMember(member: families::Member) {
    val existing = corresponding persons::Male for member
    guard { existing == null }
    call createMale(member)
  }

  routine createMale(member: families::Member) {
    val fam = member.familyFather
    guard { fam != null }
    val full = member.firstName + " " + fam.lastName
    create {
      male: persons::Male into persons::PersonRegister.persons {
        fullName = full
      }
    }
    register male
    correspondence {
      link member with male
    }
  }
}