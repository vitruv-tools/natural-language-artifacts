transformation familiesToPersons {
  metamodel "http://vitruv.tools/reactionsparser/families" as families
  metamodel "http://vitruv.tools/reactionsparser/persons" as persons

  persistence {
    families "http://vitruv.tools/methodologisttemplate/families"
    persons "http://vitruv.tools/methodologisttemplate/persons"
  }

  reaction InsertedDaughter {
    after insert families::Member daughter into families::Family.daughters of family: families::Family
    {
      val female = createOrFindFemale(daughter, family)
      updateNameAndCorrespondencesOfCorrespondingPerson(daughter, female, family)
    }
  }

  routine createOrFindFemale(daughter: families::Member, family: families::Family) : persons::Female {
    var existing: persons::Female
    existing = getCorresponding(daughter, persons::Female)
    if (existing != null) {
      return existing
    }
    val created = createFemale(daughter, family)
    establish correspondence daughter <-> created
    return created
  }

  routine createFemale(daughter: families::Member, family: families::Family) : persons::Female {
    val register = getOrCreateRoot persons::PersonRegister in persons
    val female = create persons::Female
    register.persons += female
    female.fullName = daughter.firstName + " " + family.lastName
    persist register in persons
    return female
  }

  routine updateNameAndCorrespondencesOfCorrespondingPerson(daughter: families::Member, female: persons::Female, family: families::Family) {
    female.fullName = daughter.firstName + " " + family.lastName
    establish correspondence daughter <-> female
    persist female in persons
  }
}