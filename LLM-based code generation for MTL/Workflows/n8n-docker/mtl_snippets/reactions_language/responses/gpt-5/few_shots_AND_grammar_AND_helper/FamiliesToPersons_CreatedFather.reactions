import "http://vitruv.tools/methodologisttemplate/persons" as persons
import "http://vitruv.tools/methodologisttemplate/families" as families
reactions: familiesToPersons 
in reaction to changes in families
execute actions in persons
reaction CreatedFather { 
    after element replaced at families::Family[father] 
    call { updateNameAndCorrespondencesOfCorrespondingPerson(newValue) createMaleFromNewMember(newValue) } 
}
routine updateNameAndCorrespondencesOfCorrespondingPerson(families::Member newMember) { 
    match { 
        val existingPerson = retrieve persons::Person corresponding to newMember 
    } 
    update { 
        if (existingPerson !== null) { 
            val family = newMember.familyFather 
            val ln = if (family !== null) family.lastName else "" 
            val fn = if (newMember.firstName !== null) newMember.firstName else "" 
            existingPerson.fullName = ((fn + " ") + ln).trim 
            addCorrespondenceBetween(existingPerson, newMember) 
            if (family !== null) { 
                addCorrespondenceBetween(existingPerson, family) 
            } 
        } 
    } 
}
routine createMaleFromNewMember(families::Member newMember) { 
    match { 
        require absence of persons::Person corresponding to newMember 
        val targetRegister = retrieve persons::PersonRegister corresponding to newMember.familyFather?.eContainer 
    } 
    update { 
        createMale(newMember, targetRegister) 
    } 
}
routine createMale(families::Member member, persons::PersonRegister register) { 
    create { 
        val male = new persons::Male 
    } 
    update { 
        val family = member.familyFather 
        val ln = if (family !== null) family.lastName else "" 
        val fn = if (member.firstName !== null) member.firstName else "" 
        male.fullName = ((fn + " ") + ln).trim 
        male.birthday = new java.util.Date() 
        register.persons += male 
        addCorrespondenceBetween(male, member) 
        if (family !== null) { 
            addCorrespondenceBetween(male, family) 
        } 
    } 
}